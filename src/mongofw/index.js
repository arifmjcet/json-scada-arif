/*
 * Customizable processor of mongodb changes via change streams.
 * DO NOT EDIT THIS FILE! CUSTOMIZE THE customized_module.js file
 * {json:scada} - Copyright (c) 2020-2024 - Ricardo L. Olsen
 * This file is part of the JSON-SCADA distribution (https://github.com/riclolsen/json-scada).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

'use strict'
const Log = require('./simple-logger')
const LoadConfig = require('./load-config')
const Redundancy = require('./redundancy')
const { MongoClient } = require('mongodb')
const CustomProcessor = require('./customized_module').CustomProcessor

process.on('uncaughtException', err => Log.log('Uncaught Exception:' + JSON.stringify(err)))

const args = process.argv.slice(2)
let inst = null
if (args.length > 0) inst = parseInt(args[0])

let logLevel = null
if (args.length > 1) logLevel = parseInt(args[1])
let confFile = null
if (args.length > 2) confFile = args[2]
const jsConfig = LoadConfig(confFile, logLevel, inst)
const MongoStatus = { HintMongoIsConnected: false }
Log.log('Connecting to MongoDB server...')
;(async () => {
  let clientMongo = null
  while (true) {
    if (clientMongo === null)
      await MongoClient.connect(
        jsConfig.mongoConnectionString,
        jsConfig.MongoConnectionOptions
      )
        .then(async (client) => {
          clientMongo = client
          MongoStatus.HintMongoIsConnected = true
          const db = clientMongo.db(jsConfig.mongoDatabaseName)
          Log.log('Connected correctly to MongoDB server')
          Redundancy.Start(5000, clientMongo, db, jsConfig, MongoStatus)
          CustomProcessor(clientMongo, jsConfig, Redundancy, MongoStatus)
        })
        .catch(function (err) {
          if (clientMongo) clientMongo.close()
          clientMongo = null
          Log.log(err)
        })

    // wait 5 seconds
    await new Promise((resolve) => setTimeout(resolve, 5000))

    // detect connection problems, if error will null the client to later reconnect
    if (clientMongo === undefined) {
      Log.log('Disconnected Mongodb!')
      clientMongo = null
    }
    if (clientMongo)
      if (!(await checkConnectedMongo(clientMongo))) {
        // not anymore connected, will retry
        Log.log('Disconnected Mongodb!')
        if (clientMongo) clientMongo.close()
        clientMongo = null
      }
  }
})()

// test mongoDB connectivity
async function checkConnectedMongo(client) {
  if (!client) {
    return false
  }
  const CheckMongoConnectionTimeout = 10000
  let tr = setTimeout(() => {
    Log.log('Mongo ping timeout error!')
    MongoStatus.HintMongoIsConnected = false
  }, CheckMongoConnectionTimeout)

  let res = null
  try {
    res = await client.db('admin').command({ ping: 1 })
    clearTimeout(tr)
  } catch (e) {
    Log.log('Error on mongodb connection!')
    return false
  }
  if ('ok' in res && res.ok) {
    MongoStatus.HintMongoIsConnected = true
    return true
  } else {
    MongoStatus.HintMongoIsConnected = false
    return false
  }
}
